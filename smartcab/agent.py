from pdb import set_trace as bp

import random
import math
from environment import Agent, Environment
from planner import RoutePlanner
from simulator import Simulator
import numpy as np
from numpy.random import choice

class LearningAgent(Agent):
    """ An agent that learns to drive in the Smartcab world.
        This is the object you will be modifying. """

    def __init__(self, env, learning=True, epsilon=1.0, alpha=0.2):
        super(LearningAgent, self).__init__(env)     # Set the agent in the evironment
        self.planner = RoutePlanner(self.env, self)  # Create a route planner
        self.valid_actions = self.env.valid_actions  # The set of valid actions

        # Set parameters of the learning agent
        self.learning = learning # Whether the agent is expected to learn
        self.Q = dict()          # Create a Q-table which will be a dictionary of tuples
        self.epsilon = epsilon   # Random exploration factor
        self.alpha = alpha       # Learning factor
        self.trials_completed = 0
        self.a = .005
        self.optimized = True
        ###########
        ## TO DO ##
        ###########
        # Set any additional class parameters as needed


    def reset(self, destination=None, testing=False):
        """ The reset function is called at the beginning of each trial.
            'testing' is set to True if testing trials are being used
            once training trials have completed. """

        # Select the destination as the new location to route to
        self.planner.route_to(destination)

        ###########
        ## TO DO ##
        ###########
        # Update epsilon using a decay function of your choice
        # Update additional class parameters as needed
        # If 'testing' is True, set epsilon and alpha to 0

        if testing == True:
            self.epsilon = 0
            self.alpha = 0
        else:
            if self.optimized == True:
                trials_completed = self.trials_completed
                a = self.a
                self.epsilon = float(1)/math.exp(float( a * trials_completed) )

                self.trials_completed += 1
            else:
                self.epsilon = self.epsilon - .05
        return

    def build_state(self):
        """ The build_state function is called when the agent requests data from the
            environment. The next waypoint, the intersection inputs, and the deadline
            are all features available to the agent. """


        bitmap_9 = int('00000000', 2)

        # Collect data about the environment
        waypoint = self.planner.next_waypoint() # The next waypoint
        inputs = self.env.sense(self)           # Visual input - intersection light and traffic
        deadline = self.env.get_deadline(self)  # Remaining deadline

        bitmap_9 = self.sense_light( bitmap_9, inputs )
        bitmap_9 = self.sense_surroundings(bitmap_9, inputs)
        bitmap_9 = self.consider_direction(bitmap_9, waypoint)

        ###########
        ## TO DO ##
        ###########

        # Set 'state' as a tuple of relevant data for the agent
        # state = ( int(bitmap_9), deadline)

        state = int(bitmap_9)



        return state


    def get_maxQ(self, state):
        """ The get_max_Q function is called when the agent is asked to find the
            maximum Q-value of all actions based on the 'state' the smartcab is in. """

        ###########
        ## TO DO ##
        ###########
        # Calculate the maximum Q-value of all actions for a given state

        maxQ = None

        action_hash = self.Q[state]
        maxQaction = max(action_hash.iterkeys(), key=lambda k: action_hash[k])

        maxQ = self.Q[state][maxQaction]

        return ( maxQaction, maxQ )


    def createQ(self, state):
        """ The createQ function is called when a state is generated by the agent. """

        ###########
        ## TO DO ##
        ###########

        # When learning, check if the 'state' is not in the Q-table
        if self.learning == True:
            if state in self.Q:
                reward = 1
            # If it is not, create a new dictionary for that state
            else:
                self.Q[state] = {}
                #   Then, for each action available, set the initial Q-value to 0.0
                for act in self.valid_actions:
                    self.Q[state][act] = 0

        return


    def choose_action(self, state):
        """ The choose_action function is called when the agent is asked to choose
            which action to take, based on the 'state' the smartcab is in. """

        # Set the agent state and default action
        self.state = state
        self.next_waypoint = self.planner.next_waypoint()

        action = None
        action_hash = self.Q[state]
        ###########
        ## TO DO ##
        ###########
        # When not learning, choose a random action
        # When learning, choose a random action with 'epsilon' probability
        #   Otherwise, choose an action with the highest Q-value for the current state

        if self.learning == True:
            # assign Q learning value to action
            rando = random.randint(0,99)

            if rando < ( self.epsilon * 100 ) :
                action = choice(self.valid_actions)
            else:
                maxQaction, maxQ = self.get_maxQ(state)
                action_array = [ action_hash[a] for a in self.valid_actions ]
                count = action_array.count(maxQ)

                if count > 1 :
                    equal_best_indicies = [ i for i in range(len(self.valid_actions)) if action_array[i] == maxQ ]
                    index = choice(equal_best_indicies)
                    action = self.valid_actions[index]
                else:
                    action = maxQaction
        else:
            action = choice(self.valid_actions)

        return action


    def learn(self, state, action, reward):
        """ The learn function is called after the agent completes an action and
            receives an award. This function does not consider future rewards
            when conducting learning. """

        ###########
        ## TO DO ##
        ###########
        # When learning, implement the value iteration update rule
        #   Use only the learning rate 'alpha' (do not use the discount factor 'gamma')

        # old_state = self.state

        if self.learning == True:
            currentQ = self.Q[state][action]

            self.Q[state][action] = ( reward * self.alpha ) + currentQ*(1-self.alpha)

        return


    def update(self):
        """ The update function is called when a time step is completed in the
            environment for a given trial. This function will build the agent
            state, choose an action, receive a reward, and learn if enabled. """

        state = self.build_state()          # Get current state
        self.createQ(state)                 # Create 'state' in Q-table
        action = self.choose_action(state)  # Choose an action
        reward = self.env.act(self, action) # Receive a reward
        self.learn(state, action, reward)   # Q-learn

        return

    def sense_light(self, bitmap_9, inputs):
        """
            Set the 0th bit of bitmap to represent binary nature of the light.
        """

        light = inputs['light']
        bitmask = int('0000000000', 2)

        if light == 'green' :
            bitmask = int('0000000001', 2)

        bitmap_9 = bitmap_9|bitmask


        return bitmap_9

    def sense_surroundings(self, bitmap_9, inputs):
        """
            Set the bits of bitmap that represent traffic condititons.
            [1:7]
        """

        oncoming = inputs['oncoming']
        left = inputs['left']
        right = inputs['right']

        oncoming_state = self.consider_intersection( oncoming )
        left_state = self.consider_intersection( left )
        right_state = self.consider_intersection( right )

        bitmask = int('0000000000', 2)

        bitmask = bitmask | (oncoming_state << 1 ) | (left_state << 3 ) | (right_state << 5 )

        bitmap_9 = bitmap_9|bitmask

        return bitmap_9

    def consider_direction(self, bitmap_9, waypoint):
        """
            Set the bits of bitmap that represent direction to destination.
            [8:9]
        """

        bitmask = int('0000000000', 2)
        waypoint_state = self.consider_intersection( waypoint )

        bitmask = bitmask | (waypoint_state << 7)

        bitmap_9 = bitmap_9|bitmask

        return bitmap_9

    def consider_intersection(self, direction ):
        quad_state = int('0000000000', 2)

        if direction == 'left' :
            quad_state = int('0000000001', 2)
        elif direction == 'right' :
            quad_state = int('0000000010', 2)
        elif direction == 'forward' :
            quad_state = int('0000000011', 2)
        else:
            quad_state = int('0000000000', 2)

        return quad_state

def run():
    """ Driving function for running the simulation.
        Press ESC to close the simulation, or [SPACE] to pause the simulation. """

    ##############
    # Create the environment
    # Flags:
    #   verbose     - set to True to display additional output from the simulation
    #   num_dummies - discrete number of dummy agents in the environment, default is 100
    #   grid_size   - discrete number of intersections (columns, rows), default is (8, 6)
    env = Environment()

    ##############
    # Create the driving agent
    # Flags:
    #   learning   - set to True to force the driving agent to use Q-learning
    #    * epsilon - continuous value for the exploration factor, default is 1
    #    * alpha   - continuous value for the learning rate, default is 0.5
    agent = env.create_agent(LearningAgent)

    ##############
    # Follow the driving agent
    # Flags:
    #   enforce_deadline - set to True to enforce a deadline metric
    env.set_primary_agent(agent)

    ##############
    # Create the simulation
    # Flags:
    #   update_delay - continuous time (in seconds) between actions, default is 2.0 seconds
    #   display      - set to False to disable the GUI if PyGame is enabled
    #   log_metrics  - set to True to log trial and simulation results to /logs
    #   optimized    - set to True to change the default log file name
    sim = Simulator(env)

    ##############
    # Run the simulator
    # Flags:
    #   tolerance  - epsilon tolerance before beginning testing, default is 0.05
    #   n_test     - discrete number of testing trials to perform, default is 0
    sim.run()


if __name__ == '__main__':
    run()
